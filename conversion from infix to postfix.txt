#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define max_size 5
void push(char s[max_size],int *top,char symbol)
{  
     if(*top==max_size-1)  
    {        
       printf("overflow\n");      
       return;
    }   
    (*top)++;   
    s[*top]=symbol;
}
char pop(char s[max_size],int *top)
{
    char symbol;   
    if(*top==-1)  
  { 
       printf("underflow\n"); 
   } 
   else 
   {  
  symbol=s[*top];  
  (*top)--;
    return symbol; 
   }
}
int F(char symbol)
{    
switch(symbol) 
   {      
  case '+':       
 case '-':return 2;  
      case '*':    
    case '/':    
    case '%':return 4;       
 case '$':       
 case '^':return 5;  
      case '(':return 0;     
   case '#':return -1;  
      default:return 8;  
  }
}
int G(char symbol)
{
    switch(symbol)   
 { 
       case '+':
        case '-':return 1;  
      case '*': 
       case '/':  
      case '%':return 3;  
      case '$': 
       case '^':return 6;   
     case ')':return 9; 
       case '(':return 0;  
      default: return 7;   
 }
}
void conv_infix_postfix(char infix[20],char postfix[20])
{  
  int top=-1,i=0,j=0;  
  char s[max_size],symbol;  
  push(s,&top,'#');   
 while(infix[i]!='\0') 
   {      
  symbol=infix[i];    
    while(F(s[top])>G(symbol)) 
       {     
       postfix[j]=pop(s,&top);      
      j++;     
   }     
   if(F(s[top])!=G(symbol))     
   {         
   push(s,&top,symbol);   
     }      
  else 
       { 
           pop(s,&top);      
  }   
         i++;  
  } 
   while(top!=0)
    {   
     postfix[j]=pop(s,&top);        
    j++; 
   }   
     postfix[j]='\0';
}int main()
{
    int top=-1; 
   char s[max_size],symbol,infix[20],postfix[20]; 
   printf("enter the infix expression\n"); 
   scanf("%s",&infix);  
  push(s,&top,symbol);    
pop(s,&top);
   conv_infix_postfix(infix,postfix); 
   printf("postfix expression is %s\n",postfix);
}
